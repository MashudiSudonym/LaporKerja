// Mocks generated by Mockito 5.4.6 from annotations
// in lapor_kerja/test/domain/repositories/project_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:lapor_kerja/core/utils/result.dart' as _i5;
import 'package:lapor_kerja/domain/entities/project_entity.dart' as _i4;
import 'package:lapor_kerja/domain/repositories/project_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ProjectRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectRepository extends _i1.Mock implements _i2.ProjectRepository {
  MockProjectRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.ProjectEntity>> watchAllProjects() =>
      (super.noSuchMethod(
            Invocation.method(#watchAllProjects, []),
            returnValue: _i3.Stream<List<_i4.ProjectEntity>>.empty(),
          )
          as _i3.Stream<List<_i4.ProjectEntity>>);

  @override
  _i3.Future<_i5.Result<_i4.ProjectEntity>> getProjectById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProjectById, [id]),
            returnValue: _i3.Future<_i5.Result<_i4.ProjectEntity>>.value(
              _i6.dummyValue<_i5.Result<_i4.ProjectEntity>>(
                this,
                Invocation.method(#getProjectById, [id]),
              ),
            ),
          )
          as _i3.Future<_i5.Result<_i4.ProjectEntity>>);

  @override
  _i3.Future<_i5.Result<void>> createProject(_i4.ProjectEntity? project) =>
      (super.noSuchMethod(
            Invocation.method(#createProject, [project]),
            returnValue: _i3.Future<_i5.Result<void>>.value(
              _i6.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#createProject, [project]),
              ),
            ),
          )
          as _i3.Future<_i5.Result<void>>);

  @override
  _i3.Future<_i5.Result<void>> updateProject(_i4.ProjectEntity? project) =>
      (super.noSuchMethod(
            Invocation.method(#updateProject, [project]),
            returnValue: _i3.Future<_i5.Result<void>>.value(
              _i6.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#updateProject, [project]),
              ),
            ),
          )
          as _i3.Future<_i5.Result<void>>);

  @override
  _i3.Future<_i5.Result<void>> softDeleteProject(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#softDeleteProject, [id]),
            returnValue: _i3.Future<_i5.Result<void>>.value(
              _i6.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#softDeleteProject, [id]),
              ),
            ),
          )
          as _i3.Future<_i5.Result<void>>);

  @override
  _i3.Future<_i5.Result<List<_i4.ProjectEntity>>> getUnsyncedProjects() =>
      (super.noSuchMethod(
            Invocation.method(#getUnsyncedProjects, []),
            returnValue: _i3.Future<_i5.Result<List<_i4.ProjectEntity>>>.value(
              _i6.dummyValue<_i5.Result<List<_i4.ProjectEntity>>>(
                this,
                Invocation.method(#getUnsyncedProjects, []),
              ),
            ),
          )
          as _i3.Future<_i5.Result<List<_i4.ProjectEntity>>>);

  @override
  _i3.Future<_i5.Result<void>> markProjectAsSynced(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#markProjectAsSynced, [id]),
            returnValue: _i3.Future<_i5.Result<void>>.value(
              _i6.dummyValue<_i5.Result<void>>(
                this,
                Invocation.method(#markProjectAsSynced, [id]),
              ),
            ),
          )
          as _i3.Future<_i5.Result<void>>);
}
