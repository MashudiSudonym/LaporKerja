// Mocks generated by Mockito 5.4.6 from annotations
// in lapor_kerja/test/domain/repositories/income_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:lapor_kerja/domain/entities/income_entity.dart' as _i4;
import 'package:lapor_kerja/domain/repositories/income_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IncomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIncomeRepository extends _i1.Mock implements _i2.IncomeRepository {
  MockIncomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.IncomeEntity>> watchAllIncomes() =>
      (super.noSuchMethod(
            Invocation.method(#watchAllIncomes, []),
            returnValue: _i3.Stream<List<_i4.IncomeEntity>>.empty(),
          )
          as _i3.Stream<List<_i4.IncomeEntity>>);

  @override
  _i3.Stream<List<_i4.IncomeEntity>> watchIncomesForProject(int? projectId) =>
      (super.noSuchMethod(
            Invocation.method(#watchIncomesForProject, [projectId]),
            returnValue: _i3.Stream<List<_i4.IncomeEntity>>.empty(),
          )
          as _i3.Stream<List<_i4.IncomeEntity>>);

  @override
  _i3.Future<_i4.IncomeEntity?> getIncomeById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getIncomeById, [id]),
            returnValue: _i3.Future<_i4.IncomeEntity?>.value(),
          )
          as _i3.Future<_i4.IncomeEntity?>);

  @override
  _i3.Future<void> createIncome(_i4.IncomeEntity? income) =>
      (super.noSuchMethod(
            Invocation.method(#createIncome, [income]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateIncome(_i4.IncomeEntity? income) =>
      (super.noSuchMethod(
            Invocation.method(#updateIncome, [income]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> softDeleteIncome(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#softDeleteIncome, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.IncomeEntity>> getUnsyncedIncomes() =>
      (super.noSuchMethod(
            Invocation.method(#getUnsyncedIncomes, []),
            returnValue: _i3.Future<List<_i4.IncomeEntity>>.value(
              <_i4.IncomeEntity>[],
            ),
          )
          as _i3.Future<List<_i4.IncomeEntity>>);

  @override
  _i3.Future<void> markIncomeAsSynced(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#markIncomeAsSynced, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
